name: Linux Builds (wallet + miniupnpc)

on:
  push:
    branches: [ main, master ]
    tags: [ "v*", "release-*" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.flavor.name }} • ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ x86_64 ]
        flavor:
          - name: musl-static
            container: alpine:3.20
          - name: glibc-portable
            container: ubuntu:20.04

    container: ${{ matrix.flavor.container }}

    env:
      MAKEJOBS: "-j$(nproc)"
      ARTIFACT_DIR: out
      PKG_NAME: interchained-${{ matrix.flavor.name }}-${{ matrix.arch }}-${{ github.sha }}
      D_BIN: src/interchainedd
      CLI_BIN: src/interchained-cli

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # ===========================
      # 1) Alpine MUSL — FULLY STATIC
      #    Wallet + miniupnpc, ZMQ OFF
      # ===========================
      - name: Install deps (Alpine musl)
        if: matrix.flavor.name == 'musl-static'
        run: |
          apk update
          apk add --no-cache \
            bash coreutils build-base autoconf automake libtool pkgconf \
            boost-dev boost-static \
            libevent-dev libevent-static \
            openssl-dev openssl-libs-static \
            git xz curl

      - name: Build Berkeley DB 4.8 (musl, static)
        if: matrix.flavor.name == 'musl-static'
        env:
          BDB_PREFIX: ${{ github.workspace }}/db4
        run: |
          set -eux
          git clone --depth=1 https://github.com/bitcoin/berkeleydb.git bdb-src
          cd bdb-src
          git fetch --tags
          git checkout db-4.8.30.NC
          cd build_unix
          ../dist/configure --prefix="$BDB_PREFIX" --enable-cxx --disable-shared --with-pic
          make $MAKEJOBS
          make install
          ls -lah "$BDB_PREFIX"/lib

      - name: Build miniupnpc (musl, static)
        if: matrix.flavor.name == 'musl-static'
        env:
          LOCAL_PREFIX: /usr/local
        run: |
          set -eux
          git clone --depth=1 https://github.com/miniupnp/miniupnp.git
          cd miniupnp/miniupnpc
          make -j"$(nproc)" SHARED=0
          # Manually "install" static lib and headers so configure can find them
          mkdir -p "$LOCAL_PREFIX/lib" "$LOCAL_PREFIX/include/miniupnpc"
          cp -v libminiupnpc.a "$LOCAL_PREFIX/lib/"
          cp -v *.h "$LOCAL_PREFIX/include/miniupnpc/"
          ls -lah "$LOCAL_PREFIX/lib" "$LOCAL_PREFIX/include/miniupnpc"

      - name: Configure & Build (Alpine musl static)
        if: matrix.flavor.name == 'musl-static'
        env:
          BDB_PREFIX: ${{ github.workspace }}/db4
          CPPFLAGS: "-I${{ github.workspace }}/db4/include -I/usr/local/include"
          LDFLAGS: "-L${{ github.workspace }}/db4/lib -L/usr/local/lib -static"
          CFLAGS: "-O2"
          CXXFLAGS: "-O2"
        run: |
          ./autogen.sh
          ./configure \
            --enable-wallet \
            --with-incompatible-bdb \
            --without-gui \
            --disable-bench \
            --disable-tests \
            --with-miniupnpc \
            --disable-zmq
          make $MAKEJOBS
          test -f "$D_BIN" && test -f "$CLI_BIN"

      - name: Verify static linkage (Alpine)
        if: matrix.flavor.name == 'musl-static'
        run: |
          file "$D_BIN" "$CLI_BIN"
          ldd "$D_BIN" || true
          ldd "$CLI_BIN" || true

      # ==================================
      # 2) Ubuntu 20.04 — GLIBC PORTABLE
      #    Wallet + miniupnpc + ZMQ
      # ==================================
      - name: Install deps (Ubuntu 20.04)
        if: matrix.flavor.name == 'glibc-portable'
        run: |
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            build-essential autoconf automake libtool pkg-config \
            libevent-dev libboost-all-dev libminiupnpc-dev \
            libzmq3-dev libsqlite3-dev libssl-dev \
            ca-certificates curl git xz-utils

      - name: Build Berkeley DB 4.8 locally (no mirrors)
        if: matrix.flavor.name == 'glibc-portable'
        env:
          BDB_PREFIX: ${{ github.workspace }}/db4
        run: |
          set -eux
          git clone --depth=1 https://github.com/bitcoin/berkeleydb.git bdb-src
          cd bdb-src
          git fetch --tags
          git checkout db-4.8.30.NC
          cd build_unix
          ../dist/configure --prefix="$BDB_PREFIX" --enable-cxx --disable-shared --with-pic
          make $MAKEJOBS
          make install
          ls -lah "$BDB_PREFIX"/lib

      - name: Configure & Build (Ubuntu glibc portable)
        if: matrix.flavor.name == 'glibc-portable'
        env:
          BDB_PREFIX: ${{ github.workspace }}/db4
          CPPFLAGS: "-I${{ github.workspace }}/db4/include"
          LDFLAGS: "-L${{ github.workspace }}/db4/lib -static-libstdc++ -static-libgcc"
        run: |
          ./autogen.sh
          ./configure \
            --enable-wallet \
            --with-incompatible-bdb \
            --without-gui \
            --disable-bench \
            --disable-tests \
            --with-zmq \
            --with-miniupnpc
          make $MAKEJOBS
          test -f "$D_BIN" && test -f "$CLI_BIN"

      - name: Show linkage (Ubuntu)
        if: matrix.flavor.name == 'glibc-portable'
        run: |
          file "$D_BIN" "$CLI_BIN"
          ldd "$D_BIN" || true
          ldd "$CLI_BIN" || true

      # -------------------
      # Package artifacts
      # -------------------
      - name: Strip & package
        run: |
          mkdir -p "$ARTIFACT_DIR"
          strip "$D_BIN" || true
          strip "$CLI_BIN" || true
          cp -v "$D_BIN" "$CLI_BIN" "$ARTIFACT_DIR"/
          [ -f README.md ] && cp README.md "$ARTIFACT_DIR"/ || true
          [ -f COPYING ] && cp COPYING "$ARTIFACT_DIR"/ || true
          ( cd "$ARTIFACT_DIR" && sha256sum interchainedd interchained-cli > SHA256SUMS )
          tar -C "$ARTIFACT_DIR" -czf "${PKG_NAME}.tar.gz" .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PKG_NAME }}
          path: ${{ env.PKG_NAME }}.tar.gz
          if-no-files-found: error
